using NJsonSchema.CodeGeneration.CSharp;

namespace JsonToCSharpConverter.Engine;

public static class GeneratorExtensions
{
    public static string Generate(string json)
    {
        var schemaGenerator = new JsonSchemaGenerator();
        var schema = schemaGenerator.Generate(json);
        schema.Title = "Template";

        var generatorSettings = new CSharpGeneratorSettings
        {
            ClassStyle = CSharpClassStyle.Poco,
            JsonLibrary = CSharpJsonLibrary.SystemTextJson
        };

        var generator = new CSharpGenerator(schema, generatorSettings);

        var header = @"[System.CodeDom.Compiler.GeneratedCode(""NJsonSchema"", ""11.0.0.0 (Newtonsoft.Json v13.0.0.0)"")]";
        var generatedFile = generator.GenerateFile();
        generatedFile = generatedFile.Replace("\n\n\n", "\n");
        generatedFile = generatedFile.Replace(header, "");
        generatedFile = generatedFile.Replace("partial class", "class");
        generatedFile = generatedFile.Replace("#pragma warning disable // Disable all warnings", "");
        generatedFile = generatedFile.Replace("//----------------------", "");
        generatedFile = generatedFile.Replace("// <auto-generated>", "");
        generatedFile = generatedFile.Replace("// </auto-generated>", "");
        generatedFile = generatedFile.Replace("//     Generated using the NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)", "");
        generatedFile = generatedFile.Replace("System.Text.Json.Serialization.", "");
        generatedFile = generatedFile.Replace("\n\n", "\n");
        generatedFile = generatedFile.Replace("\n\n\n", "");
        generatedFile = generatedFile.Replace("\n\n\n", "");

        return generatedFile;
    }
}

